version: 2.1 # CircleCI version number

#### Orbs ##############
orbs:
  python: circleci/python@1.4.0 
  heroku: circleci/heroku@1.2.6 # Deploy application with minimal config to Heroku using CircleCI authored
  slack: circleci/slack@4.6.3 # Slack Notifications 
  snyk: snyk/snyk@1.4.0
  sonarcloud: sonarsource/sonarcloud@1.0.3  
####################################################################################
# Workflows
###################################################################################
####################################################################################
workflows:
  version: 2
  build-deploy:
    jobs:
      - build and snyk scan
      - test
      - runner
      - container-agent
      - Scan via SonarCloud:
          context: SonarCloud
          requires:
            - build and snyk scan
            - test   
      - hold:
          type: approval
          requires:
            - Scan via SonarCloud
          filters:
            branches: 
              only: master
      - heroku/deploy-via-git:
          requires:
            - hold
          filters:
            branches:
              only: master

######################################################################################
# Defining jobs
######################################################################################

jobs:
  build and snyk scan: 
    working_directory: ~/Webapplications
    docker:
      - image: cimg/python:3.10.4-browsers  # convinence imagess
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys: 
                - pip-packages-v1-{{ .Branch }}-nitin
                - pip-packages-v1-{{ .Branch }}-
                - pip-packages-v1-
      - run:
          name: Creating venv and Installing Python Dependencies
          command: |
           pipenv install -r requirements/dev.txt
      - save_cache:
          key: pip-packages-v1-{{ .Branch }}-nitin
          paths:
            - 'venv'
  #      - snyk/scan:
  #         docker-image-name: cimg/base:2021.11

      # - run:
      #     name: Activate venv and Checking python version
      #     command: |
      #       . venv/bin/activate
      #       python --version 
  Scan via SonarCloud:
    working_directory: ~/Webapplications
    docker:
      - image: cimg/node:12.18.1
    resource_class: large
    steps:
    - checkout
    - sonarcloud/scan
  test:
    docker:
      - image: cimg/python:3.10.4-browsers # Adjust based on your needs
    resource_class: large # Adjust based on resource requirements
    steps:
      - checkout

      # Set up web driver (replace with your approach)
      - restore_cache:
          keys:
            - chromedriver-v107.0.5304.62 # Replace with specific version
          paths:
            - /usr/local/bin/
      - run:
          name: Download ChromeDriver (if not cached)
          command: |
            curl -o https://chromedriver.storage.googleapis.com/107.0.5304.62/chromedriver_linux64.zip
            unzip -o chromedriver_linux64.zip
            chmod +x chromedriver
            mv chromedriver /usr/local/bin/
      - save_cache:
          key: chromedriver-v107.0.5304.62 # Replace with specific version
          paths:
            - /usr/local/bin/

      # Install dependencies
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-nitin # Replace with your key format
          paths:
            - .venv
      - run:
          name: Install dependencies
          command: |
            pipenv install -r requirements/dev.txt
      - save_cache:
          key: pip-packages-v1-{{ .Branch }}-nitin # Replace with your key format
          paths:
            - .venv

      # Start Flask app (adjust command and background logic if needed)
      - run:
          name: Start Flask app
          command: |
            pipenv run python manage.py runserver --port=5000 &

      # Run tests
      - run:
          name: Run tests
          command: pipenv run python manage.py test

      # Store test results and artifacts (adjust paths)
      - store_test_results:
          path: test-reports/  # Adapt path to your reports dir
      - store_artifacts:
          path: test-reports/  # Adjust path to desired artifacts
  runner:
    machine: true
    resource_class: runner-nitin/runner-demo
    steps:
      - run: echo "Hello, This job is on Runner"

  container-agent:
    docker:
      - image: cimg/base:2021.11
    resource_class: runner-nitin/containeragent
    steps:
      - run: echo "Hello, This job is on Container Agent"